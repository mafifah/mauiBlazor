@typeparam TData
@using Newtonsoft.Json.Linq

<RadzenDataGrid Data="@Items" TItem="TData" AllowPaging="true"
				AllowFiltering="true" AllowSorting="true" AllowColumnResize="true"
                AllowColumnPicking="true" RowClick="@DataSelected"
				FilterMode="FilterMode.SimpleWithMenu" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                SelectionMode="Radzen.DataGridSelectionMode.Single" @bind-Value="SelectedData">
    <Columns>
        @Column
        @if(Column == null)
        {
            @foreach (var propertyname in Atribut)
            {
                <RadzenDataGridColumn TItem="TData" Property="@propertyname" Title="@propertyname"></RadzenDataGridColumn>
            }
        }
    </Columns>
</RadzenDataGrid>
@code {


    public List<string> Atribut = new List<string>();

    [Parameter]
    public IList<TData> Items { get; set; }
    [Parameter]
    public RenderFragment Column { get; set; }

    public IList<TData> SelectedData { get; set; }

    [Parameter]
    public TData SelectedItem { get; set; }

    [Parameter]
    public EventCallback<TData> OnDataSelected { get; set; }

    public async Task DataSelected()
    {
        await this.OnDataSelected.InvokeAsync(this.SelectedItem);
    }
	protected override void OnParametersSet()
	{
        var json = System.Text.Json.JsonSerializer.Serialize(Items);
        JArray array = JArray.Parse(json);
        var loop = 0;
        foreach (JObject content in array)
        {
            if (loop == 0)
                foreach (JProperty prop in content.Properties())
                {
                    
                    var x = Atribut.Where(e => e.Contains(prop.Name));
                    if (!x.Any())
                    {
                        Atribut.Add(prop.Name);
                        
                    }
                }
                loop++;
        }
    }
}
